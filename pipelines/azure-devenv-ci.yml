parameters:
- name: workspace
  displayName: Pipeline Environment / Terraform Workspace
  type: string
  default: ci
  values:
  - ci
  - ci1
  - ci2
  - ci3
  - cd1
  - cd2
  - cd3
- name: clear
  displayName: Clear State
  type: boolean
  default: false
- name: destroy
  displayName: Destroy Infrastructure
  type: string
  default: Always
  values:
  - Always
  - Never 
  - 'On failure'
  - 'On success'
- name: testReentrance
  displayName: Test Terraform re-entrance (apply twice)
  type: boolean
  default: true
- name: unpinTerraform
  displayName: Unpin Terraform version
  type: boolean
  default: false
- name: unpinTerraformProviders
  displayName: Unpin Terraform provider versions
  type: boolean
  default: false

trigger: none

pr:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 3 * * *'
  displayName: 'Nightly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - master

variables:
- group: 'devenv-ci'
- name: 'jobTimeOutMinutes'
  value: 180
- name: 'repository'
  value: 'azure-devenv'
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: 'yes_without_prompt'
- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- name: 'TF_WORKSPACE'
  value: ${{ parameters.workspace }}
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/terraform'
- ${{ if parameters.clear }}:  # Don't reset suffix if we want to keep existing resources
  - name: 'TF_VAR_resource_suffix'
    value: '$(Build.BuildId)'
- name: 'TF_VAR_run_id'
  value: '$(Build.BuildId)'
- name: 'TF_VAR_ssh_private_key'
  value: '$(Build.SourcesDirectory)/.ssh/id_rsa'
- name: 'TF_VAR_ssh_public_key'
  value: '$(Build.SourcesDirectory)/.ssh/id_rsa.pub'

- name: 'resourceGroup' 
  value: 'dev-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'

jobs:
- job: 'Provision'
  ${{ if eq(parameters.destroy, 'Always') }}:
    displayName: 'Provision (${{ parameters.workspace }}) & Destroy'
  ${{ if eq(parameters.destroy, 'Never') }}:
    displayName: 'Provision (${{ parameters.workspace }})'
  ${{ if eq(parameters.destroy, 'On failure') }}:
    displayName: 'Provision (${{ parameters.workspace }}) & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if eq(parameters.destroy, 'On success') }}:
    displayName: 'Provision (${{ parameters.workspace }}) & Destroy (${{ lower(parameters.destroy) }})'
  condition: succeeded()
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)

  workspace:
    clean: all

  steps:
    - bash: |
        mkdir -p $(dirname $(TF_VAR_ssh_private_key))
        ssh-keygen -q -m PEM -N '' -f $(TF_VAR_ssh_private_key)
      displayName: 'Generate SSH key pair'
      workingDirectory: '$(terraformDirectory)'


    - ${{ if not(parameters.unpinTerraform) }}:
      - pwsh: |
          $terraformVersion = (Get-Content .terraform-version)
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]${terraformVersion}"
          Copy-Item backend.tf.sample backend.tf
        name: terraformConfig
        displayName: 'Prepare Terraform config'
        workingDirectory: '$(terraformDirectory)'
    - ${{ if parameters.unpinTerraform }}:
      - pwsh: |
          (Get-Content ./provider.tf) -replace "required_version *= `" *(~>|=) +",'required_version = ">= ' | Out-File provider.tf
          Get-Content ./provider.tf
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]latest"
          Copy-Item backend.tf.sample backend.tf
        name: terraformConfig
        displayName: 'Prepare Terraform config (latest version)'
        workingDirectory: '$(terraformDirectory)'

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformConfig.version)'

    - ${{ if parameters.unpinTerraformProviders }}:
      # Unpin version e.g. "= 2.56" -> "~> 2.56"
      - pwsh: |
          (Get-Content ./provider.tf) -replace " = `" *= +",' = "~> ' | Out-File provider.tf
          Get-Content ./provider.tf
          if (Test-Path .terraform.lock.hcl) {
            Remove-Item .terraform.lock.hcl -Force
          }
        displayName: 'Unpin Terraform provider versions'
        workingDirectory: '$(terraformDirectory)'

    - task: TerraformCLI@0
      displayName: 'Terraform init'
      inputs:
        command: 'init'
        workingDirectory: '$(terraformDirectory)'
        backendType: 'azurerm'
        backendServiceArm: '$(subscriptionConnection)'
        backendAzureRmResourceGroupName: '$(TF_STATE_RESOURCE_GROUP_NAME)'
        backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE_ACCOUNT_NAME)'
        backendAzureRmContainerName: '$(TF_STATE_CONTAINER_NAME)'
        backendAzureRmKey: 'terraform.tfstate'
        allowTelemetryCollection: true

    - ${{ if parameters.clear }}:
      - task: AzureCLI@2
        name: cleanup
        displayName: 'Clear Terraform state'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # Clean up Terraform state
            # Propagate pipeline Service Principal as Terraform variables
            $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
            $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
            $env:ARM_TENANT_ID       ??= $env:tenantId
            # Get from Azure CLI context
            $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
            $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)
            $terraformState = (terraform state pull | ConvertFrom-Json)
            if ($terraformState.resources) {
              Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
              $terraformState.outputs = New-Object PSObject # Empty output
              $terraformState.resources = @() # No resources
              $terraformState.serial++
              $terraformState | ConvertTo-Json | terraform state push -
            } else {
              Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
            }
            terraform state pull 
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(terraformDirectory)'

    - pwsh: |
        if ($${{ not(parameters.clear) }} -and (!((terraform output resource_suffix 2>&1) -match "Warning"))) {
          $env:TF_VAR_resource_suffix = "$(terraform output -raw resource_suffix 2>$null)"
        }
        # Set random CIDR (to reduce the risk of clashing VNet peerings with agent VNet)
        $env:TF_VAR_resource_suffix ??= "$(Build.BuildId)"

        # List environment variables
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,GEEKZTER_*,TF_*,SYSTEM_* | Sort-Object -Property Name

        # Convert uppercased Terraform environment variables to .auto.tfvars file
        foreach ($tfvar in $(Get-ChildItem -Path Env: -Recurse -Include TF_VAR_*)) {
          $terraformVariableName = $tfvar.Name.Substring(7).ToLowerInvariant()
          $terraformVariableValue = $tfVar.Value

          if ($terraformVariableValue -imatch "^\W*(true|false|\[[^\]]*\]|\{[^\}]*\})\W*$") {
            # Boolean or List, write as-is
            Write-Output "${terraformVariableName} = ${terraformVariableValue}" | Out-File ci.auto.tfvars -Append -Force
          } else {
            Write-Output "${terraformVariableName} = `"${terraformVariableValue}`"" | Out-File ci.auto.tfvars -Append -Force
          }
        } 
        Write-Host "Contents of ci.auto.tfvars:"
        Get-Content ci.auto.tfvars
      name: terraformVariables
      displayName: 'Prepare Terraform variables'
      workingDirectory: '$(terraformDirectory)'

    - task: TerraformCLI@0
      displayName: 'Terraform plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(terraformDirectory)'
        environmentServiceName: '$(subscriptionConnection)'
        runAzLogin: true
        commandOptions: '-out=ci.tfplan'
        allowTelemetryCollection: true
        publishPlanResults: 'ci'

    - task: TerraformCLI@0
      displayName: 'Terraform apply'
      inputs:
        command: 'apply'
        workingDirectory: '$(terraformDirectory)'
        environmentServiceName: '$(subscriptionConnection)'
        runAzLogin: true
        commandOptions: 'ci.tfplan'
        allowTelemetryCollection: true

    - task: TerraformCLI@0
      displayName: 'Terraform output'
      inputs:
        command: 'output'
        workingDirectory: '$(terraformDirectory)'
        environmentServiceName: '$(subscriptionConnection)'
        runAzLogin: true
        allowTelemetryCollection: true

    - ${{ if parameters.testReentrance }}:
      - task: TerraformCLI@0
        displayName: 'Terraform plan (re-entrance test)'
        inputs:
          command: 'plan'
          workingDirectory: '$(terraformDirectory)'
          environmentServiceName: '$(subscriptionConnection)'
          runAzLogin: true
          commandOptions: '-out=ci-update.tfplan'
          allowTelemetryCollection: true
          publishPlanResults: 'ci-update'

    - ${{ if parameters.testReentrance }}:
      - task: TerraformCLI@0
        displayName: 'Terraform apply (re-entrance test)'
        inputs:
          command: 'apply'
          workingDirectory: '$(terraformDirectory)'
          environmentServiceName: '$(subscriptionConnection)'
          runAzLogin: true
          commandOptions: 'ci-update.tfplan'
          allowTelemetryCollection: true

    - ${{ if not(eq(parameters.destroy, 'Never')) }}:
      - pwsh: |
          Write-Host "##vso[task.setvariable variable=result;isOutput=true]success"
        name: provisioningResult
        displayName: 'Indicate provisioning success'
        condition: succeeded()

    - ${{ if not(eq(parameters.destroy, 'Never')) }}:
      - task: TerraformCLI@0
        displayName: 'Terraform destroy (${{ lower(parameters.destroy) }})'
        ${{ if eq(parameters.destroy, 'Always') }}:
          condition: succeededOrFailed()
        ${{ if eq(parameters.destroy, 'On failure') }}:
          condition: failed()
        ${{ if eq(parameters.destroy, 'On success') }}:
          condition: succeeded()
        inputs:
          command: 'destroy'
          workingDirectory: '$(terraformDirectory)'
          environmentServiceName: '$(subscriptionConnection)'
          runAzLogin: true
          allowTelemetryCollection: true


- ${{ if ne(parameters.destroy, 'Never') }}:
  # Clean up resources, in the event 'terraform destroy' fails   
  - job: 'Teardown'
    dependsOn:
      - Provision
    displayName: 'Tear down & Clean up (${{ lower(parameters.destroy) }})'
    ${{ if eq(parameters.destroy, 'Always') }}:
      condition: or(always(),canceled())
    ${{ if eq(parameters.destroy, 'On failure') }}:
      condition: not(eq(dependencies.Provision.outputs['provisioningResult.result'],'success'))
    ${{ if eq(parameters.destroy, 'On success') }}:
      condition: eq(dependencies.Provision.outputs['provisioningResult.result'],'success')
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    variables:
      terraformVersion: $[ dependencies.Provision.outputs['terraformConfig.version'] ]

    pool:
      name: '$(pool)'
      vmImage: $(vmImage)

    workspace:
      clean: all

    steps:
    - task: AzureCLI@2
      name: teardown
      displayName: 'Tear down remaining resources'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resoyrce group fails
          # Build JMESPath expression
          $tagQuery = "[?tags.repository == '$(repository)' && tags.workspace == '${env:TF_WORKSPACE}' && tags.runid == '$(Build.BuildId)' && properties.provisioningState != 'Deleting'].id"
          Write-Host "Removing resources identified by `"$tagQuery`"..."

          # Remove resource groups
          $resourceGroupIDs = $(az group list --query "${tagQuery}" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceGroupIDs 2>&1
            }
          } else {
            Write-Host "No resource groups to remove"
          }

          # Remove (remaining) resources
          $resourceIDs = $(az resource list --query "${tagQuery}" -o tsv)
          if ($resourceIDs) {
            Write-Host "Removing resources `"${resourceIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceIDs 2>&1
            }
          } else {
            Write-Host "No resources to remove"
          }
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'

    - ${{ if parameters.clear }}: # Only works if we can identity the suffix and therefore the resource group name
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Delete $(resourceGroup)'
        condition: failed() # Try this if the previous approach failed
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: '$(subscriptionConnection)'
          subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
          action: 'DeleteRG'
          resourceGroupName: '$(resourceGroup)'

    - task: TerraformInstaller@0
      condition: succeededOrFailed() # Procees clearing Terraform state, even if resources could not be removed
      displayName: 'Install terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'

    - task: TerraformCLI@0
      displayName: 'Terraform init'
      inputs:
        command: 'init'
        workingDirectory: '$(terraformDirectory)'
        backendType: 'azurerm'
        backendServiceArm: '$(subscriptionConnection)'
        backendAzureRmResourceGroupName: '$(TF_STATE_RESOURCE_GROUP_NAME)'
        backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE_ACCOUNT_NAME)'
        backendAzureRmContainerName: '$(TF_STATE_CONTAINER_NAME)'
        backendAzureRmKey: 'terraform.tfstate'
        allowTelemetryCollection: true

    - task: AzureCLI@2
      name: cleanup
      displayName: 'Clean up Terraform state'
      condition: succeededOrFailed()
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Clean up Terraform state
          # Propagate pipeline Service Principal as Terraform variables
          $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
          $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
          $env:ARM_TENANT_ID       ??= $env:tenantId
          # Get from Azure CLI context
          $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
          $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)
          $terraformState = (terraform state pull | ConvertFrom-Json)
          if ($terraformState.resources) {
            Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
            $terraformState.outputs = New-Object PSObject # Empty output
            $terraformState.resources = @() # No resources
            $terraformState.serial++
            $terraformState | ConvertTo-Json | terraform state push -
          } else {
            Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
          }
          terraform state pull 
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'