parameters:
- name: workspace
  displayName: Pipeline Environment / Terraform Workspace prefix
  type: string
  default: ci
  values:
  - ci
  - ci1
  - ci2
  - ci3
  - cd1
  - cd2
  - cd3
- name: clear
  displayName: Clear State
  type: boolean
  default: false
- name: destroy
  displayName: Destroy Infrastructure
  type: string
  default: Always
  values:
  - Always
  - Never 
  - 'On failure'
  - 'On success'
- name: testReentrance
  displayName: Test Terraform re-entrance (apply twice)
  type: boolean
  default: true
- name: unpinTerraform
  displayName: Unpin Terraform version
  type: boolean
  default: false
- name: unpinTerraformProviders
  displayName: Strategy (Terraform provider pinning, alternate variables)
  type: string
  default: No
  values:
  - No
  - Yes
  - Strategy

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ parameters.workspace }}-$(Build.BuildId)

trigger: none

pr:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 23 * * Fri'
  displayName: 'Weekly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - master

variables:
- group: 'devenv-ci'
- name: 'jobTimeOutMinutes'
  value: 180
- name: 'repository'
  value: 'azure-devenv'
- name: AZURE_CORE_ONLY_SHOW_ERRORS
  value: 'true'
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: 'yes_without_prompt'
- name: 'substituteAlternateVariables'
  value: 'false'
- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'
- name: 'terraformArtifactName'
  value: 'terraform'
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/terraform'
- name: 'TF_VAR_admin_username'
  value: 'ciuser'
- name: 'TF_VAR_run_id'
  value: '$(Build.BuildId)'
- name: 'TF_VAR_ssh_private_key'
  value: '$(Build.SourcesDirectory)/.ssh/id_rsa_ci'
- name: 'TF_VAR_ssh_public_key'
  value: '$(Build.SourcesDirectory)/.ssh/id_rsa_ci.pub'

- name: 'resourceGroup' 
  value: '$(TF_VAR_resource_prefix)-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'

jobs:
- job: 'Provision'
  ${{ if eq(parameters.destroy, 'Always') }}:
    displayName: 'Provision (${{ parameters.workspace }}) & Destroy'
  ${{ if eq(parameters.destroy, 'Never') }}:
    displayName: 'Provision (${{ parameters.workspace }})'
  ${{ if eq(parameters.destroy, 'On failure') }}:
    displayName: 'Provision (${{ parameters.workspace }}) & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if eq(parameters.destroy, 'On success') }}:
    displayName: 'Provision (${{ parameters.workspace }}) & Destroy (${{ lower(parameters.destroy) }})'
  condition: succeeded()
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)

  ${{ if or(eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual'))) }}:
    strategy:
      matrix:
        primary:
          resourceGroup: '$(TF_VAR_resource_prefix)-${{ parameters.workspace }}a-$(Build.BuildId)'
          terraformArtifactName: 'terraformPrimary-$(System.JobId)'
          substituteAlternateVariables: false
          TF_VAR_resource_suffix: '$(Build.BuildId)'
          TF_WORKSPACE: '${{ parameters.workspace }}a'
          unpinTerraformProviders: ${{ lower(eq(parameters.unpinTerraformProviders, 'Yes')) }}
        alternate:
          resourceGroup: '$(TF_VAR_resource_prefix)-${{ parameters.workspace }}b-$(Build.BuildId)'
          terraformArtifactName: 'terraformAlternate-$(System.JobId)'
          substituteAlternateVariables: true
          TF_VAR_resource_suffix: '$(Build.BuildId)'
          TF_WORKSPACE: '${{ parameters.workspace }}b'
          unpinTerraformProviders: ${{ lower(or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual'))) }}
      maxParallel: 2

  variables:
    ${{ if not(or(eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual')))) }}:
      # Not running as strategy
      terraformArtifactName: 'terraformPrimary-$(System.JobId)'
      ${{ if parameters.clear }}:  # Don't reset suffix if we want to keep existing resources
        TF_VAR_resource_suffix: '$(Build.BuildId)'
      TF_WORKSPACE: '${{ parameters.workspace }}'
      unpinTerraformProviders: ${{ eq(parameters.unpinTerraformProviders, 'Yes') }}
    resourceGroup: '$(TF_VAR_resource_prefix)-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'

  workspace:
    clean: all

  steps:
    - ${{ if not(parameters.unpinTerraform) }}:
      - pwsh: |
          $terraformVersion = (Get-Content .terraform-version)
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]${terraformVersion}"
          Copy-Item backend.tf.sample backend.tf
        name: terraformConfig
        displayName: 'Prepare Terraform config'
        workingDirectory: '$(terraformDirectory)'
    - ${{ if parameters.unpinTerraform }}:
      - pwsh: |
          (Get-Content ./provider.tf) -replace "required_version *= `" *(~>|=) +",'required_version = ">= ' | Out-File provider.tf
          Get-Content ./provider.tf
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]latest"
          Copy-Item backend.tf.sample backend.tf
        name: terraformConfig
        displayName: 'Prepare Terraform config (latest version)'
        workingDirectory: '$(terraformDirectory)'

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformConfig.version)'

    - ${{ if or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual'))) }}:
      # Unpin version e.g. "= 2.56" -> "~> 2.56"
      - pwsh: |
          (Get-Content ./provider.tf) -replace " = `" *= +",' = "~> ' | Out-File provider.tf
          Get-Content ./provider.tf
          if (Test-Path .terraform.lock.hcl) {
            Remove-Item .terraform.lock.hcl -Force
          }
        displayName: 'Unpin Terraform provider versions'
        # condition required as '- ${{ if ' template expression is not evaluated when using a strategy
        condition: and(succeeded(), eq(variables['unpinTerraformProviders'],'true'))
        workingDirectory: '$(terraformDirectory)'

    - task: TerraformCLI@0
      displayName: 'Terraform init'
      inputs:
        command: 'init'
        workingDirectory: '$(terraformDirectory)'
        backendType: 'azurerm'
        backendServiceArm: '$(subscriptionConnection)'
        backendAzureRmResourceGroupName: '$(TF_STATE_BACKEND_RESOURCE_GROUP_NAME)'
        backendAzureRmStorageAccountName: '$(TF_STATE_BACKEND_STORAGE_ACCOUNT_NAME)'
        backendAzureRmContainerName: '$(TF_STATE_BACKEND_STORAGE_CONTAINER_NAME)'
        backendAzureRmKey: 'terraform.tfstate'
        allowTelemetryCollection: true

    - publish: $(terraformDirectory)
      displayName: 'Publish Terraform workspace'
      artifact: $(terraformArtifactName)

    - ${{ if parameters.clear }}:
      - task: AzureCLI@2
        name: cleanup
        displayName: 'Clear Terraform state'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $(scriptDirectory)/set_terraform_azurerm_vars.ps1

            $terraformState = (terraform state pull | ConvertFrom-Json)
            if ($terraformState.resources) {
              Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
              $terraformState.outputs = New-Object PSObject # Empty output
              $terraformState.resources = @() # No resources
              $terraformState.serial++
              $terraformState | ConvertTo-Json | terraform state push -
            } else {
              Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
            }
            terraform state pull 
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(terraformDirectory)'

    - ${{ if not(parameters.clear) }}:
      - task: AzureCLI@2
        # Punch holes in firewall for the agent this job runs on
        displayName: 'Open ports on pre-existing virtual machines'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            ./set_terraform_azurerm_vars.ps1
            ./let_me_in.ps1
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'

    - ${{ if not(parameters.clear) }}:
      - task: AzureCLI@2
        displayName: 'Restore SSH key pair'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            ./set_terraform_azurerm_vars.ps1

            ./get_ssh_key_pair.ps1 -Keyname $(TF_VAR_ssh_private_key) -Force
            $keyDirectory = (Split-Path $(TF_VAR_ssh_private_key) -Parent)
            if (Test-Path $keyDirectory) {
              ls -al $keyDirectory
            }
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'

    - bash: |
        if [ -f "$(TF_VAR_ssh_private_key)" ]; then
            echo "$(TF_VAR_ssh_private_key) already exists, skipping key pair generation"
        else 
            echo "$(TF_VAR_ssh_private_key) does not exist, generation key pair..."
            mkdir -p $(dirname $(TF_VAR_ssh_private_key))
            ssh-keygen -q -m PEM -N '' -f $(TF_VAR_ssh_private_key)
        fi
        ls -al $(dirname $(TF_VAR_ssh_private_key))
      displayName: 'Generate SSH key pair'
      workingDirectory: '$(terraformDirectory)'

    - task: AzureCLI@2
      displayName: 'Test SSH connection (bastion)'
      condition: and(succeeded(), not(eq(coalesce(variables['TF_VAR_deploy_bastion'],'false'),'false')), not(eq(coalesce(variables['TF_VAR_deploy_linux'],'true'),'false')))
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az extension add --name ssh --upgrade
          Write-Output 'ls -al ~' | az network bastion ssh --ids /subscriptions/3f56da7f-5953-4018-8ca8-e20dbfa0a7e2/resourceGroups/ericvan-vm-upzv/providers/Microsoft.Network/bastionHosts/ericvan-vm-upzv-westeurope-network-bastion `
                                                            --target-resource-id /subscriptions/3f56da7f-5953-4018-8ca8-e20dbfa0a7e2/resourceGroups/ericvan-vm-upzv/providers/Microsoft.Compute/virtualMachines/ericvan-vm-upzv-westeurope-l `
                                                            --auth-type ssh-key `
                                                            --username $(TF_VAR_admin_username) `
                                                            --ssh-key $(TF_VAR_ssh_private_key)
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'


    # - task: AzureCLI@2
    #   displayName: 'Test SSH connection (bastion)'
    #   inputs:
    #     azureSubscription: '$(subscriptionConnection)'
    #     scriptType: pscore
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       az extension add --name ssh --upgrade
    #       Write-Output 'ls -al ~' | az network bastion ssh --ids /subscriptions/3f56da7f-5953-4018-8ca8-e20dbfa0a7e2/resourceGroups/ericvan-vm-upzv/providers/Microsoft.Network/bastionHosts/ericvan-vm-upzv-westeurope-network-bastion `
    #                                                         --target-resource-id /subscriptions/3f56da7f-5953-4018-8ca8-e20dbfa0a7e2/resourceGroups/ericvan-vm-upzv/providers/Microsoft.Compute/virtualMachines/ericvan-vm-upzv-westeurope-l `
    #                                                         --auth-type ssh-key `
    #                                                         --username eric `
    #                                                         --ssh-key ~/.ssh/id_rsa_ci
    #     addSpnToEnvironment: true
    #     useGlobalConfig: true
    #     failOnStandardError: true
    #     workingDirectory: '$(scriptDirectory)'


# /subscriptions/3f56da7f-5953-4018-8ca8-e20dbfa0a7e2/resourceGroups/ericvan-vm-upzv/providers/Microsoft.Compute/virtualMachines/ericvan-vm-upzv-westeurope-l