#!/usr/bin/env pwsh
<# 
.SYNOPSIS 
    Use this to connect to a Linux host
    
    This file is generated by Terraform
    https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file
    https://www.terraform.io/language/functions/templatefile
#> 
param ( 
    [parameter(Mandatory=$false)]
    [validateset("Bastion", "PrivateHostname", "PrivateIP", "PublicHostname", "PublicIP")]
    [string]
    $Endpoint,

    [parameter(Mandatory=$false)]
    [validateset(%{ for location in locations }"${location}",%{ endfor ~}"${default_location}")]
    [string]
    $Location="${default_location}"


    # TODO: Windows
) 

if (!$Endpoint) {
    $defaultChoice = 0
    $choices = @(
        [System.Management.Automation.Host.ChoiceDescription]::new("&Bastion")
        [System.Management.Automation.Host.ChoiceDescription]::new("PrivateHost&name")
        [System.Management.Automation.Host.ChoiceDescription]::new("&PrivateIP")
        [System.Management.Automation.Host.ChoiceDescription]::new("Public&Hostname")
        [System.Management.Automation.Host.ChoiceDescription]::new("Public&IP")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Exit", "Abort operation")
    )
    $decision = $Host.UI.PromptForChoice("Connect", "How do you want to connect to the Linux VM?", $choices, $defaultChoice)
    Write-Host $choices[$decision].HelpMessage
    $choices[$decision].Label -replace "&", "" | Set-Variable Endpoint
}

$virtualMachineData = '${virtual_machine_data}'
$virtualMachineData | ConvertFrom-Json -AsHashtable | Set-Variable virtualMachines

"Connecting to Linux VM in '{0}' using {1}..." -f $Location, $Endpoint | Write-Host
$virtualMachines[$Location] | Out-String | Write-Debug
switch ($Endpoint)
{
    "Bastion" {
        # Log into Azure CLI
        $account = $null
        az account show 2>$null | ConvertFrom-Json | Set-Variable account
        if (-not $account) {
            if ($env:CODESPACES -ieq "true") {
                $azLoginSwitches = "--use-device-code"
            }
            if ($env:ARM_TENANT_ID) {
                az login -t $env:ARM_TENANT_ID -o none $($azLoginSwitches)
            } else {
                az login -o none $($azLoginSwitches)
            }
        }
        "id: {0}" -f $virtualMachines[$Location].id | Write-Debug
        az network bastion ssh --ids "${bastion_id}" `
                               --target-resource-id $virtualMachines[$Location].id `
                               --auth-type "ssh-key" `
                               --username "${user_name}" `
                               --ssh-key ${ssh_private_key}
    }
    "PrivateIP" {
        "private_ip_address: {0}" -f $virtualMachines[$Location].private_ip_address | Write-Debug
        ssh -i ${ssh_private_key} ${user_name}@$($virtualMachines[$Location].private_ip_address)
    }
    "PrivateHostname" {
        "private_fqdn: {0}" -f $virtualMachines[$Location].private_fqdn | Write-Debug
        ssh -i ${ssh_private_key} ${user_name}@$($virtualMachines[$Location].private_fqdn)
    }
    "PublicIP" {
        "public_ip_address: {0}" -f $virtualMachines[$Location].public_ip_address | Write-Debug
        ssh -i ${ssh_private_key} ${user_name}@$($virtualMachines[$Location].public_ip_address)
    }
    "PublicHostname" {
        "public_fqdn: {0}" -f $virtualMachines[$Location].public_fqdn | Write-Debug
        ssh -i ${ssh_private_key} ${user_name}@$($virtualMachines[$Location].public_fqdn)
    }
}
