#!/usr/bin/env pwsh
<# 
.SYNOPSIS 
    Use this to connect to a VM in resource group ${resource_group_id}
    
.DESCRIPTION 
    This script will connect to a VM in resource group ${resource_group_id}

    This file is generated by Terraform
    https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file
    https://www.terraform.io/language/functions/templatefile

.EXAMPLE
    ./connect_vm.ps1 -IgnoreKnownHosts -Location ${default_location} -Endpoint PublicHostname -OS Linux

.EXAMPLE
    Unblock-File ./connect_vm.ps1
    ./connect_vm.ps1 -IgnoreKnownHosts -Location ${default_location} -Endpoint PublicHostname -OS Linux -UseAADAuth
    sudo -u ${user_name} -i
#> 
param ( 
    [parameter(Mandatory=$false)]
    [validateset("Bastion", "PrivateHostname", "PrivateIP", "PublicHostname", "PublicIP")]
    [string]
    $Endpoint,

    [parameter(Mandatory=$false)]
    [validateset(%{ for location in locations }"${location}",%{ endfor ~}"${default_location}")]
    [string]
    $Location,

    [parameter(Mandatory=$false)]
    [validateset("Linux", "Windows")]
    [string]
    $OS,

    [parameter(Mandatory=$false)]
    [switch]
    $UseAADAuth,

    [parameter(Mandatory=$false)]
    [switch]
    $IgnoreKnownHosts
) 

if (!$OS) {
    $defaultChoice = 0
    $choices = @(
        [System.Management.Automation.Host.ChoiceDescription]::new("&Linux")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Windows")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Exit", "Abort operation")
    )
    $decision = $Host.UI.PromptForChoice("OS", "What Operating System is the VM running?", $choices, $defaultChoice)
    if ($decision -eq ($choices.Length - 1)) {
        exit
    }
    $choices[$decision].Label -replace "&", "" | Set-Variable OS
    Write-Host $OS
}

if (!$Location) {
    $defaultChoice = 0
    $choices = @(
%{ for location in locations }
        [System.Management.Automation.Host.ChoiceDescription]::new("&${location}")
%{ endfor ~}
        [System.Management.Automation.Host.ChoiceDescription]::new("&Exit", "Abort operation")
    )
    $decision = $Host.UI.PromptForChoice("OS", "In what location is the VM running?", $choices, $defaultChoice)
    if ($decision -eq ($choices.Length - 1)) {
        exit
    }
    $choices[$decision].Label -replace "&", "" | Set-Variable Location
    Write-Host $Location
}

if (!$Endpoint) {
    $defaultChoice = 0
    $choices = @(
        [System.Management.Automation.Host.ChoiceDescription]::new("&Bastion","Azure managed bastion host")
        [System.Management.Automation.Host.ChoiceDescription]::new("PrivateHost&name","Private hostname (requires VPN)")
        [System.Management.Automation.Host.ChoiceDescription]::new("&PrivateIP","Private ip address (requires VPN)")
        [System.Management.Automation.Host.ChoiceDescription]::new("Public&Hostname","Public hostname (requires NSG rule)")
        [System.Management.Automation.Host.ChoiceDescription]::new("Public&IP","Public ip address (requires NSG rule)")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Exit", "Abort operation")
    )
    $decision = $Host.UI.PromptForChoice("Connect", "How do you want to connect to the Linux VM?", $choices, $defaultChoice)
    if ($decision -eq ($choices.Length - 1)) {
        exit
    }
    $choices[$decision].Label -replace "&", "" | Set-Variable Endpoint
    Write-Host $choices[$decision].HelpMessage
}

if (!$PSBoundParameters.ContainsKey('UseAADAuth') -and ($Endpoint -ieq "Bastion") -and ($OS -ieq "Linux")) {
    if ($IsWindows) {
        $defaultChoice = 0
    } else {
        $defaultChoice = 1
    }
    
    $choices = @(
        [System.Management.Automation.Host.ChoiceDescription]::new("&AAD","Azure Active Directory")
        [System.Management.Automation.Host.ChoiceDescription]::new("&SSH","SSH Key pair")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Exit", "Abort operation")
    )
    $decision = $Host.UI.PromptForChoice("UseAADAuth", "Do you want to authentication with AAD or SSH key?", $choices, $defaultChoice)
    if ($decision -eq ($choices.Length - 1)) {
        exit
    }
    $UseAADAuth = ($decision -eq 0)
    Write-Host $choices[$decision].HelpMessage
}

if (!$PSBoundParameters.ContainsKey('IgnoreKnownHosts') -and ($Endpoint -ine "Bastion") -and ($OS -ieq "Linux")) {
    $defaultChoice = 0
    $choices = @(
        [System.Management.Automation.Host.ChoiceDescription]::new("&No")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Yes")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Exit", "Abort operation")
    )
    $decision = $Host.UI.PromptForChoice("IgnoreKnownHosts", "Do you want to ignore known SSH hosts?", $choices, $defaultChoice)
    if ($decision -eq ($choices.Length - 1)) {
        exit
    }
    $IgnoreKnownHosts = ($decision -eq 1)
    Write-Host $IgnoreKnownHosts
}
if ($IgnoreKnownHosts) {
    $sshOptions = '-o "StrictHostKeyChecking=no"'
}

Write-Debug "bastion_id: ${bastion_id}"
Write-Debug "default_location: ${default_location}"
Write-Debug "resource_group_id: ${resource_group_id}"
Write-Debug "ssh_private_key: ${ssh_private_key}"
Write-Debug "tenant_id: ${tenant_id}"
Write-Debug "user_name: ${user_name}"

$linuxVirtualMachineData   = '${linux_virtual_machine_data}'
$linuxVirtualMachineData   | ConvertFrom-Json -AsHashtable | Set-Variable linuxVirtualMachines
$windowsVirtualMachineData = '${windows_virtual_machine_data}'
$windowsVirtualMachineData | ConvertFrom-Json -AsHashtable | Set-Variable windowsVirtualMachines
$linuxVirtualMachines[$Location]   | Out-String | Write-Debug
$windowsVirtualMachines[$Location] | Out-String | Write-Debug

"Connecting to {0} VM in '{1}' using {2}..." -f $OS, $Location, $Endpoint | Write-Host
switch ($Endpoint)
{
    "Bastion" {
        # Log into Azure CLI
        $azureAccount = $null
        az account show 2>$null | ConvertFrom-Json | Set-Variable azureAccount
        if ($azureAccount -and ($azureAccount.tenantId -ine "${tenant_id}")) {
            $azureAccount = $null
        }
        if (-not $azureAccount) {
            Write-Host "Not logged into tenant ${tenant_id}"
            if ($env:CODESPACES -ieq "true") {
                $azLoginSwitches = "--use-device-code"
            }
            az login -t "${tenant_id}" -o none $($azLoginSwitches)
        }

        if ($OS -ieq "Linux") {
            if (!(az extension show --name ssh 2>$null)) {
                az extension add --name ssh --yes
            }
            "id: {0}" -f $linuxVirtualMachines[$Location].id | Write-Debug
            if ($UseAADAuth) {
                az network bastion ssh --ids "${bastion_id}" --target-resource-id $linuxVirtualMachines[$Location].id --auth-type AAD
            } else {
                az network bastion ssh --ids "${bastion_id}" --target-resource-id $linuxVirtualMachines[$Location].id --auth-type ssh-key --username ${user_name} --ssh-key ${ssh_private_key}
            }
        } else {
            "id: {0}" -f $WindowsVirtualMachines[$Location].id | Write-Debug
            az network bastion rdp --ids "${bastion_id}" --target-resource-id $WindowsVirtualMachines[$Location].id 
        }
    }
    "PrivateIP" {
        if ($OS -ieq "Linux") {
            "private_ip_address: {0}" -f $linuxVirtualMachines[$Location].private_ip_address | Write-Debug
            ssh $sshOptions -i ${ssh_private_key} ${user_name}@$($linuxVirtualMachines[$Location].private_ip_address)
        } else {
            Connect-Rdp -UserName "${user_name}" -HostName $windowsVirtualMachines[$Location].private_ip_address
        }
    }
    "PrivateHostname" {
        if ($OS -ieq "Linux") {
            "private_fqdn: {0}" -f $linuxVirtualMachines[$Location].private_fqdn | Write-Debug
            ssh $sshOptions -i ${ssh_private_key} ${user_name}@$($linuxVirtualMachines[$Location].private_fqdn)
        } else {
            Connect-Rdp -UserName "${user_name}" -HostName $windowsVirtualMachines[$Location].private_fqdn
        }
    }
    "PublicIP" {
        if ($OS -ieq "Linux") {
            "public_ip_address: {0}" -f $linuxVirtualMachines[$Location].public_ip_address | Write-Debug
            ssh $sshOptions -i ${ssh_private_key} ${user_name}@$($linuxVirtualMachines[$Location].public_ip_address)
        } else {
            Connect-Rdp -UserName "${user_name}" -HostName $windowsVirtualMachines[$Location].public_ip_address
        }
    }
    "PublicHostname" {
        if ($OS -ieq "Linux") {
            "public_fqdn: {0}" -f $linuxVirtualMachines[$Location].public_fqdn | Write-Debug
            ssh $sshOptions -i ${ssh_private_key} ${user_name}@$($linuxVirtualMachines[$Location].public_fqdn)
        } else {
            Connect-Rdp -UserName "${user_name}" -HostName $windowsVirtualMachines[$Location].public_fqdn
        }
    }
}
